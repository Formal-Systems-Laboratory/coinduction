Require Export fun_semantics.
Require Export patterns.
Require Export pattern_tactics.

Set Implicit Arguments.

Require Import ZArith.
Require Import List.

Require Import zipper_patterns.
Require Import Setoid.

Arguments Zplus x y : simpl nomatch.

Inductive tree : Set :=
 Leaf | Node : Z -> Z -> tree -> tree -> tree.

Fixpoint height t :=
  match t with
      Leaf => 0
    | Node _ _ l r => 1 + Z.max (height l) (height r)
  end%Z.

Fixpoint size t :=
  match t with
      Leaf => 0
    | Node _ _ l r => 1 + size l + size r
  end%Z.

(* Now the heap representation *)

(* 
struct treeNode {
  int key;
  int val;
  struct treeNode *left;
  struct treeNode *right;
};
*)

Notation tree_node key val left right :=
  (KStruct (Struct ("key" s|-> KInt key :* "val" s|-> KInt val
            :* "left" s|-> KInt left :* "right" s|-> KInt right))).
Notation build_tree key val left right :=
  (EBuild ("key" s|-> (key : Exp) :* "val" s|-> (val : Exp)
   :* "left" s|-> (left : Exp) :* "right" s|-> (right : Exp))).

Fixpoint rep_tree t p : MapPattern k k :=
  match t with
    | Leaf => constraint (p = 0)%Z
    | Node k v l r => constraint (p <> 0)%Z :*
                    existP pl, existP pr,
                    (p h|-> tree_node k v pl pr :* rep_tree l pl :* rep_tree r pr)
  end%pattern.

Require Import ZArith.

Create HintDb tree_hints discriminated.
Hint Resolve f_equal stk_equiv_refl : tree_hints.
Hint Extern 2 (_ ~= _) => equate_maps : tree_hints.
Hint Extern 1 (Int _ = Int _) => (apply f_equal;solve[ring]) : tree_hints.

Ltac step_solver := econstructor (solve[simpl;eauto with tree_hints]).

Lemma rep_seg_exp_app :
  forall a z l1 l2,
    PatEquiv
      (existP mid, rep_seg l1 mid a :* rep_seg l2 z mid)
      (rep_seg (l1++l2) z a).
Proof.
split.
intro. simplify_pat_hyps. eauto using rep_seg_app.

revert h a.
induction l1.
list_rep_tac.

simpl.
intros.
simplify_pat_hyps.
apply IHl1 in H1.
simplify_pat_hyps.
list_rep_tac.
Qed.
Ltac simpl_tree_rep :=
let posneg val p H :=
   let dest := destruct val;simpl in H;simplify_pat_hyps in
   match goal with
   | [H0 : p = 0%Z |- _] =>   dest;[clear H0|exfalso;tauto]
   | [Hnz : p <> 0%Z |- _] => dest;[exfalso;tauto|clear Hnz]
   end
in match goal with
 |[H : _ |= rep_seg (_ ++ _) _ _ |- _] =>
     rewrite <- rep_seg_exp_app in H; simplify_pat_hyps 
 |[H : _ |= rep_seg (_ :: _) _ _ |- _] =>
     simpl in H; simplify_pat_hyps 
 |[H : _ |= rep_tree ?t ?p |- _] => posneg t p H
 |[H : _ |= rep_seg ?l _ ?p |- _] => posneg l p H
 |[H : _ |= rep_prop_list _ ?l ?p |- _] => posneg l p H
 end.

Ltac use_tree_cfg_assumptions :=
  match goal with 
    | [H : kcell ?v = _ |- _] =>
      is_var v; destruct v; simpl in H;
      rewrite H in * |- *;clear H
    | [H : _ = kcell ?v |- _] =>
      is_var v; destruct v; simpl in H;
      rewrite <- H in * |- *;clear H
    | [H : match ?k with KCfg _ _ _ _ _ _  => _ end |- _] =>
         is_var k;destruct k;simpl in H
    | [H : exists _ , _ |- _] =>
      decompose record H; clear H
    | [H : _ /\ _  |- _ ] => destruct H
    | [H : ?l ~= _ |- ?G] =>
         is_var l;
         match G with
         | context [?l] => fail 1
         | _ => rewrite H in * |- *;clear H l
         end
   end.

Ltac use_assumptions :=
  instantiate; simpl in * |- *; simplify_pat_hyps; simpl in * |- *;
  repeat simpl_tree_rep.

Ltac start_proving ::=
  let get_cfg_assumptions := (intros;repeat (use_tree_cfg_assumptions
                                            || simpl_tree_rep)) in
  try get_cfg_assumptions;apply proved_sound;destruct 1;
         simpl in * |-;try (get_cfg_assumptions;simpl in * |- *);
    use_assumptions.

(* Maybe we need a tactic that's given the new hypothesis
   and figures out how to apply it? *)
Ltac split_tac :=  instantiate;simpl;match goal with
  | [|- trans _ _ {| kcell := kra (KStmt (SIf (BCon ?B) _ _)) _ |} _ ] =>
    split_bool B
  | [|- trans _ _ {| kcell := kra (KExp (BAnd (BCon ?B) _)) _ |} _ ] =>
    split_bool B
  | [|- trans _ _ {| kcell := kra (KExp (BOr (BCon ?B) _)) _ |} _ ] =>
    split_bool B
  end;try (exfalso;solve[auto]);use_assumptions.

(* pattern solver *)

Lemma exP_lift : forall {Key Elt A} (body : A -> MapPattern Key Elt) P,
  PatEquiv (exP body :* P) (exP (fun a => body a :* P)%pattern).
firstorder.
Qed.
Lemma exist_expose : forall Key Elt A (m : A -> MapPattern Key Elt) h,
   (h |= existP a, m a) <-> (exists a, h |= m a).
Proof.
reflexivity.
Qed.

Ltac break_join := eexists;eexists;split;[|split].

Ltac solve_atomic_pat h item :=
  match item with
  | constraint _ => esplit;[auto with zarith | reflexivity]
  | litP _ => apply litP_expose;(reflexivity || equate_maps)
  | itemP _ _ => apply itemP_expose;reflexivity
  | rep_tree ?t 0 => unify t Leaf;split;reflexivity
  | rep_tree _ ?p =>
    match  goal with
    | [H : ?hp |= rep_tree _ p |- _] =>
      match h with
        | context [hp] => eexact H
      end
    end
  | rep_seg ?l ?p ?p => unify l (@nil Z);split;reflexivity
  | rep_seg _ _ ?p =>
    match  goal with
    | [H : ?hp |= rep_seg _ _ p |- _] =>
      match h with
        | context [hp] => eexact H
      end
    end
  | @rep_prop_list ?A _ ?l 0 => unify l (@nil A);split;reflexivity
  | @rep_prop_list ?A _ _ ?x =>
    match  goal with
    | [H : ?hp |= @rep_prop_list A _ _ x |- _] =>
      match h with
        | context [hp] => eexact H
      end
    end
  | _ => assumption
  end.

Lemma rep_tree_exp_node :
  forall p v l r,
    PatEquiv (rep_tree (Node v l r) p)
      (constraint (p <> 0)%Z
       :* existP pl, existP pr,
         (p h|-> tree_node v pl pr :* rep_tree l pl :* rep_tree r pr)).
Proof.
reflexivity.
Qed.

Lemma rep_seg_exp_cons :
  forall e p x l,
    PatEquiv (rep_seg (x::l) e p)
      (constraint (p <> 0%Z)
       :* existP next, p h|-> list_node x next :* rep_seg l e next).
Proof.
reflexivity.
Qed.

Lemma rep_prop_exp_cons :
  forall addr A P x l,
    PatEquiv (@rep_prop_list A P (x::l) addr)
      (constraint (addr <> 0%Z)
       :* existP x', existP next, addr h|-> list_node x' next :* P x x' :* rep_prop_list P l next).
Proof.
reflexivity.
Qed.

Ltac simpl_pat h P :=
match P with
| rep_tree _ ?p =>
   match h with
     | context [p h|-> _] => rewrite (rep_tree_exp_node p)
   end
| rep_seg _ ?e ?p =>
   match h with
     | context [p h|-> _] => rewrite (rep_seg_exp_cons e p)
   end
| rep_seg (_ ++ _) ?q ?p => rewrite <- (rep_seg_exp_app p q)
| rep_seg ?l ?x ?y =>
  (is_evar x;fail 1) || (is_evar y;fail 1) ||
  first [
    match h with
    | context [y h|-> list_node ?v x] =>
    unify l (v::nil);simpl
    end
  | match goal with
    | [H : ?h2 |= rep_seg ?l1 ?mid y |- _] =>
      match h with
      | context [h2] => rewrite <- (rep_seg_exp_app y x)
      end
    end
  ]
| rep_prop_list _ _ ?y =>
  match h with
  | context [y h|-> list_node _ _] => rewrite (rep_prop_exp_cons y)
  end
end;simpl.

Ltac pat_solver :=
match goal with
| [|- ?h |= _] => expand_map h
end;simpl;
repeat (rewrite ?patEquivAssoc;
match goal with
| [|- _ |= existP _ , _] => eexists
| [|- _ |= (existP _ , _) :* _] => rewrite exP_lift
| [|- _ |= asP _ _] => split;[reflexivity|]
| [|- ?h |= ?P :* _] => break_join;[solve_atomic_pat h P| |solve[equate_maps]]
                     || simpl_pat h P
| [|- ?h |= ?P] =>
   solve_atomic_pat h P || simpl_pat h P
| [|- ?h |= ?P] => first[is_evar P | is_var P];
  try eassumption;
  (apply litP_expose; reflexivity) (* make a litP pattern *)
end).

Ltac trans_applies := econstructor(match goal with
  [|- kcell _ = _ ] => reflexivity || fail 1 | _ => idtac end).
Ltac work_trans_goal :=
  match goal with
    | [|- exists _ , _ ] => eexists;work_trans_goal
    | [|- _ /\ _] => split;work_trans_goal
    | [|- _ |= _] => instantiate;simpl;pat_solver
    | [|- _ ~= _] => instantiate;simpl;equate_maps
    | _ => simpl;try eassumption;try reflexivity;auto with zarith
  end. (* ;instantiate;pat_solver.*)
Ltac trans_solver := econstructor(match goal with
  [|- fun_domains_aux.kcell _ = _ ] => reflexivity || fail 1 | _ => idtac end);
  simpl;work_trans_goal.

Ltac trans_use_result ::=
    try solve[intros;eapply ddone;assumption]
 || lazymatch goal with
    | [|- forall k, returning _ _ k -> _] =>
         apply use_returning;do 6 intro;try use_expose_frame;intros
    | _ => (* try to handle generically *)
         simpl in * |- *;intros;
         repeat use_tree_cfg_assumptions;simpl in * |- *;subst;
         try match goal with
          | [H : stk_equiv (_ :: _) ?stk |- _] => is_var stk;revert stk H;use_expose_frame;intros
         end
    end
    ; use_assumptions
  .

Create HintDb trans_simpl discriminated.
Hint Rewrite Z.add_0_r : trans_simpl.

Ltac trans_tac :=
  eapply dtrans;[solve[trans_solver] || (trans_applies;fail 1)|];
    try (instantiate;simpl;autorewrite with trans_simpl;trans_use_result).

Ltac stk_equiv_trans_solver l :=
  reflexivity ||
  match goal with [H : stk_equiv l ?m |- _] =>
    apply stk_equiv_trans with m;[exact H|stk_equiv_trans_solver m]
  end.
Ltac done_solver :=
try red;
subst;simpl;
repeat match goal with
| [|- exists _, _ ] => eexists
| [|- _ /\ _] => split
end;
(simpl;match goal with
| [|- Int _ = Int _] => apply f_equal;ring
| [|- ECon _ = ECon _] => apply f_equal;ring
| [|- _ = _] => reflexivity || congruence || ring
| [|- stk_equiv ?l _] => stk_equiv_trans_solver l
| [|- _ ~= _] => solve[equate_maps]
| [|- _ |= _] => instantiate;simpl;pat_solver
| _ => auto with zarith
end).

Ltac solve_done_solver :=
try red;
subst;simpl;
repeat match goal with
| [|- exists _, _ ] => eexists
| [|- _ /\ _] => split
end;
solve[simpl;match goal with
| [|- Int _ = Int _] => apply f_equal;ring
| [|- ECon _ = ECon _] => apply f_equal;ring
| [|- _ = _] => reflexivity || congruence || ring
| [|- stk_equiv ?l _] => stk_equiv_trans_solver l
| [|- _ ~= _] => solve[equate_maps]
| [|- _ |= _] => instantiate;simpl;pat_solver
| _ => auto with zarith
end].

Require Import proof_automation.

Ltac tree_step   := generic_step   trans_tac step_solver                   split_tac.
Ltac tree_run    := generic_run    trans_tac step_solver solve_done_solver split_tac.

Ltac tree_solver := generic_solver trans_tac step_solver solve_done_solver split_tac.
