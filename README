theory/
contains some developments about the foundations,
acceptable forms of decidable rules, higher order proofs, etc.

This is more than we need for the first round of examples,
where transitivity and step seem to be enough for derived rules,
and first order properties suffice.

common/
Define the proof principles specialized to transitivity,
and also a representation of map with an ACU equivalence
relation, and some lemmas on that
Also contains theory for higher-order verification in files:
 - ho_proof_gen.v
 - ho_proof_until_gen.v
 - step_ok.v
 - step_all_ok.v
 - until_ok.v
 - until_all_ok.v

styles/
verification of toy program and toy divergent program in
different semantic styles

himp/
example proofs for imp-type language with heaps
higher-order example located in examples/ex03_list/ho.v
divergence example located in examples/ex03_list/ex14_inf.v

stack/
forth-like stack based language
divergence example located in examples/ex03_list/ex14_inf.v

lambda/
lambda calculus, no named functions (de bruijn indices)
divergence example located in examples/ex03_list/ex14_omega.v

csl/
very simple imp language (adapted from Chlipala's FRAP text),
wip on first concurrency examples; first examples with locks


simply type "./build.sh" to run
all files compiled using Coq version 8.4
